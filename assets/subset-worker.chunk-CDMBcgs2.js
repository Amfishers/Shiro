import{Commands as o,subsetToBinary as m}from"./subset-shared.chunk-Cn97xELa.js";import"./index-B_tpGowv.js";import"./index-CJFTI_qK.js";import"./index-CNZoSM1W.js";import"./owner-h7M5VfYZ.js";import"./floating-ui.react-dom-V_YSb4jD.js";import"./index-DkxnfLbS.js";import"./useQuery-DXq0rsyM.js";import"./viewport--HOndqPb.js";import"./use-is-dark-DybCws_h.js";import"./dom-BowoBODo.js";import"./helper-CB7ordUq.js";import"./lodash-r7nwj2ca.js";import"./StyledButton-2o_ICfj1.js";import"./index-BGgh87-F.js";import"./proxy-BdjgO_cg.js";import"./provider-Cz0Yo_ev.js";import"./spring-C80N1tKa.js";import"./use-is-unmounted-B6Uuq-Sv.js";import"./use-event-callback-DohXEMMW.js";import"./use-drag-controls-D7zzkMbq.js";import"./visual-element-uKM10rsH.js";import"./index-wwkJ1b8o.js";var M=import.meta.url?new URL(import.meta.url):void 0;typeof window>"u"&&typeof self<"u"&&(self.onmessage=async t=>{switch(t.data.command){case o.Subset:let r=await m(t.data.arrayBuffer,t.data.codePoints);self.postMessage(r,{transfer:[r]});break}});export{M as WorkerUrl};
